// GENERATED BY `scripts/gen-visitor-templates.py`; DO NOT MODIFY.
// Expression node visitor implementation.
// @PENGUINLIONG
#pragma once
#include "visitor/gen/expr-visitor.hpp"

void ExprVisitor::visit_expr_(const ExprConstantRef& x) {
}
void ExprVisitor::visit_expr_(const ExprLoadRef& x) {
}
void ExprVisitor::visit_expr_(const ExprAddRef& x) {
  visit_expr(x->a);
  visit_expr(x->b);
}
void ExprVisitor::visit_expr_(const ExprSubRef& x) {
  visit_expr(x->a);
  visit_expr(x->b);
}
void ExprVisitor::visit_expr_(const ExprLtRef& x) {
  visit_expr(x->a);
  visit_expr(x->b);
}
void ExprVisitor::visit_expr_(const ExprEqRef& x) {
  visit_expr(x->a);
  visit_expr(x->b);
}
void ExprVisitor::visit_expr_(const ExprTypeCastRef& x) {
  visit_expr(x->src);
}

ExprRef ExprMutator::mutate_expr_(ExprConstantRef& x) {
  return x;
}
ExprRef ExprMutator::mutate_expr_(ExprLoadRef& x) {
  return x;
}
ExprRef ExprMutator::mutate_expr_(ExprAddRef& x) {
  x->a = mutate_expr(x->a);
  x->b = mutate_expr(x->b);
  return x;
}
ExprRef ExprMutator::mutate_expr_(ExprSubRef& x) {
  x->a = mutate_expr(x->a);
  x->b = mutate_expr(x->b);
  return x;
}
ExprRef ExprMutator::mutate_expr_(ExprLtRef& x) {
  x->a = mutate_expr(x->a);
  x->b = mutate_expr(x->b);
  return x;
}
ExprRef ExprMutator::mutate_expr_(ExprEqRef& x) {
  x->a = mutate_expr(x->a);
  x->b = mutate_expr(x->b);
  return x;
}
ExprRef ExprMutator::mutate_expr_(ExprTypeCastRef& x) {
  x->src = mutate_expr(x->src);
  return x;
}
