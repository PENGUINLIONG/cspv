// GENERATED BY `scripts/gen-visitor-templates.py`; DO NOT MODIFY.
// Statement node visitor implementation.
// @PENGUINLIONG
#pragma once
#include "visitor/gen/stmt-visitor.hpp"

void StmtVisitor::visit_stmt_(const StmtBlock& x) {
  for (const auto& x : x.stmts) { visit_stmt(*x); }
}
void StmtVisitor::visit_stmt_(const StmtConditionalBranch& x) {
  visit_stmt(*x.then_block);
  visit_stmt(*x.else_block);
}
void StmtVisitor::visit_stmt_(const StmtIfThenElse& x) {
  visit_stmt(*x.body_block);
}
void StmtVisitor::visit_stmt_(const StmtLoop& x) {
  visit_stmt(*x.body_block);
  visit_stmt(*x.continue_block);
}
void StmtVisitor::visit_stmt_(const StmtReturn& x) {
}
void StmtVisitor::visit_stmt_(const StmtIfThenElseMerge& x) {
}
void StmtVisitor::visit_stmt_(const StmtLoopMerge& x) {
}
void StmtVisitor::visit_stmt_(const StmtLoopContinue& x) {
}
void StmtVisitor::visit_stmt_(const StmtLoopBackEdge& x) {
}
void StmtVisitor::visit_stmt_(const StmtRangedLoop& x) {
  visit_stmt(*x.body_block);
}
void StmtVisitor::visit_stmt_(const StmtStore& x) {
}

StmtRef StmtMutator::mutate_stmt_(StmtBlockRef& x) {
  for (auto& x : x->stmts) { x = mutate_stmt(x); }
  return x;
}
StmtRef StmtMutator::mutate_stmt_(StmtConditionalBranchRef& x) {
  x->then_block = mutate_stmt(x->then_block);
  x->else_block = mutate_stmt(x->else_block);
  return x;
}
StmtRef StmtMutator::mutate_stmt_(StmtIfThenElseRef& x) {
  x->body_block = mutate_stmt(x->body_block);
  return x;
}
StmtRef StmtMutator::mutate_stmt_(StmtLoopRef& x) {
  x->body_block = mutate_stmt(x->body_block);
  x->continue_block = mutate_stmt(x->continue_block);
  return x;
}
StmtRef StmtMutator::mutate_stmt_(StmtReturnRef& x) {
  return x;
}
StmtRef StmtMutator::mutate_stmt_(StmtIfThenElseMergeRef& x) {
  return x;
}
StmtRef StmtMutator::mutate_stmt_(StmtLoopMergeRef& x) {
  return x;
}
StmtRef StmtMutator::mutate_stmt_(StmtLoopContinueRef& x) {
  return x;
}
StmtRef StmtMutator::mutate_stmt_(StmtLoopBackEdgeRef& x) {
  return x;
}
StmtRef StmtMutator::mutate_stmt_(StmtRangedLoopRef& x) {
  x->body_block = mutate_stmt(x->body_block);
  return x;
}
StmtRef StmtMutator::mutate_stmt_(StmtStoreRef& x) {
  return x;
}
