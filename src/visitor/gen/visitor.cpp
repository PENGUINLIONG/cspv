// GENERATED BY `scripts/gen-visitor-templates.py`; DO NOT MODIFY.
// Node visitor implementation.
// @PENGUINLIONG
#pragma once
#include "visitor/gen/visitor.hpp"

void Visitor::visit_mem_(MemoryFunctionVariableRef x) {
}
void Visitor::visit_mem_(MemoryIterationVariableRef x) {
}
void Visitor::visit_mem_(MemoryUniformBufferRef x) {
}
void Visitor::visit_mem_(MemoryStorageBufferRef x) {
}
void Visitor::visit_mem_(MemorySampledImageRef x) {
}
void Visitor::visit_mem_(MemoryStorageImageRef x) {
}

void Visitor::visit_ty_(TypeVoidRef x) {
}
void Visitor::visit_ty_(TypeBoolRef x) {
}
void Visitor::visit_ty_(TypeIntRef x) {
}
void Visitor::visit_ty_(TypeFloatRef x) {
}
void Visitor::visit_ty_(TypeStructRef x) {
  for (const auto& x : x->members) { visit_ty(x); }
}
void Visitor::visit_ty_(TypePointerRef x) {
  visit_ty(x->inner);
}

void Visitor::visit_expr_(ExprConstantRef x) {
}
void Visitor::visit_expr_(ExprLoadRef x) {
}
void Visitor::visit_expr_(ExprAddRef x) {
  visit_expr(x->a);
  visit_expr(x->b);
}
void Visitor::visit_expr_(ExprSubRef x) {
  visit_expr(x->a);
  visit_expr(x->b);
}
void Visitor::visit_expr_(ExprLtRef x) {
  visit_expr(x->a);
  visit_expr(x->b);
}
void Visitor::visit_expr_(ExprEqRef x) {
  visit_expr(x->a);
  visit_expr(x->b);
}
void Visitor::visit_expr_(ExprNotRef x) {
  visit_expr(x->a);
}
void Visitor::visit_expr_(ExprTypeCastRef x) {
  visit_expr(x->src);
}
void Visitor::visit_expr_(ExprSelectRef x) {
  visit_expr(x->cond);
  visit_expr(x->a);
  visit_expr(x->b);
}

void Visitor::visit_stmt_(StmtNopRef x) {
}
void Visitor::visit_stmt_(StmtBlockRef x) {
  for (const auto& x : x->stmts) { visit_stmt(x); }
}
void Visitor::visit_stmt_(StmtConditionalRef x) {
  visit_stmt(x->then_block);
}
void Visitor::visit_stmt_(StmtConditionalBranchRef x) {
  visit_stmt(x->then_block);
  visit_stmt(x->else_block);
}
void Visitor::visit_stmt_(StmtIfThenElseRef x) {
  visit_stmt(x->body_block);
}
void Visitor::visit_stmt_(StmtLoopRef x) {
  visit_stmt(x->body_block);
  visit_stmt(x->continue_block);
}
void Visitor::visit_stmt_(StmtReturnRef x) {
}
void Visitor::visit_stmt_(StmtIfThenElseMergeRef x) {
}
void Visitor::visit_stmt_(StmtLoopMergeRef x) {
}
void Visitor::visit_stmt_(StmtLoopContinueRef x) {
}
void Visitor::visit_stmt_(StmtLoopBackEdgeRef x) {
}
void Visitor::visit_stmt_(StmtRangedLoopRef x) {
  visit_stmt(x->body_block);
}
void Visitor::visit_stmt_(StmtStoreRef x) {
}

MemoryRef Mutator::mutate_mem_(MemoryFunctionVariableRef x) {
  return x.as<Memory>();
}
MemoryRef Mutator::mutate_mem_(MemoryIterationVariableRef x) {
  x->begin = mutate_expr(x->begin);
  x->end = mutate_expr(x->end);
  x->stride = mutate_expr(x->stride);
  return x.as<Memory>();
}
MemoryRef Mutator::mutate_mem_(MemoryUniformBufferRef x) {
  return x.as<Memory>();
}
MemoryRef Mutator::mutate_mem_(MemoryStorageBufferRef x) {
  return x.as<Memory>();
}
MemoryRef Mutator::mutate_mem_(MemorySampledImageRef x) {
  return x.as<Memory>();
}
MemoryRef Mutator::mutate_mem_(MemoryStorageImageRef x) {
  return x.as<Memory>();
}

TypeRef Mutator::mutate_ty_(TypeVoidRef x) {
  return x.as<Type>();
}
TypeRef Mutator::mutate_ty_(TypeBoolRef x) {
  return x.as<Type>();
}
TypeRef Mutator::mutate_ty_(TypeIntRef x) {
  return x.as<Type>();
}
TypeRef Mutator::mutate_ty_(TypeFloatRef x) {
  return x.as<Type>();
}
TypeRef Mutator::mutate_ty_(TypeStructRef x) {
  for (auto& x : x->members) { x = mutate_ty(x); }
  return x.as<Type>();
}
TypeRef Mutator::mutate_ty_(TypePointerRef x) {
  x->inner = mutate_ty(x->inner);
  return x.as<Type>();
}

ExprRef Mutator::mutate_expr_(ExprConstantRef x) {
  return x.as<Expr>();
}
ExprRef Mutator::mutate_expr_(ExprLoadRef x) {
  x->src_ptr = mutate_mem(x->src_ptr);
  return x.as<Expr>();
}
ExprRef Mutator::mutate_expr_(ExprAddRef x) {
  x->a = mutate_expr(x->a);
  x->b = mutate_expr(x->b);
  return x.as<Expr>();
}
ExprRef Mutator::mutate_expr_(ExprSubRef x) {
  x->a = mutate_expr(x->a);
  x->b = mutate_expr(x->b);
  return x.as<Expr>();
}
ExprRef Mutator::mutate_expr_(ExprLtRef x) {
  x->a = mutate_expr(x->a);
  x->b = mutate_expr(x->b);
  return x.as<Expr>();
}
ExprRef Mutator::mutate_expr_(ExprEqRef x) {
  x->a = mutate_expr(x->a);
  x->b = mutate_expr(x->b);
  return x.as<Expr>();
}
ExprRef Mutator::mutate_expr_(ExprNotRef x) {
  x->a = mutate_expr(x->a);
  return x.as<Expr>();
}
ExprRef Mutator::mutate_expr_(ExprTypeCastRef x) {
  x->src = mutate_expr(x->src);
  return x.as<Expr>();
}
ExprRef Mutator::mutate_expr_(ExprSelectRef x) {
  x->cond = mutate_expr(x->cond);
  x->a = mutate_expr(x->a);
  x->b = mutate_expr(x->b);
  return x.as<Expr>();
}

StmtRef Mutator::mutate_stmt_(StmtNopRef x) {
  return x.as<Stmt>();
}
StmtRef Mutator::mutate_stmt_(StmtBlockRef x) {
  for (auto& x : x->stmts) { x = mutate_stmt(x); }
  return x.as<Stmt>();
}
StmtRef Mutator::mutate_stmt_(StmtConditionalRef x) {
  x->cond = mutate_expr(x->cond);
  x->then_block = mutate_stmt(x->then_block);
  return x.as<Stmt>();
}
StmtRef Mutator::mutate_stmt_(StmtConditionalBranchRef x) {
  x->cond = mutate_expr(x->cond);
  x->then_block = mutate_stmt(x->then_block);
  x->else_block = mutate_stmt(x->else_block);
  return x.as<Stmt>();
}
StmtRef Mutator::mutate_stmt_(StmtIfThenElseRef x) {
  x->body_block = mutate_stmt(x->body_block);
  return x.as<Stmt>();
}
StmtRef Mutator::mutate_stmt_(StmtLoopRef x) {
  x->body_block = mutate_stmt(x->body_block);
  x->continue_block = mutate_stmt(x->continue_block);
  return x.as<Stmt>();
}
StmtRef Mutator::mutate_stmt_(StmtReturnRef x) {
  return x.as<Stmt>();
}
StmtRef Mutator::mutate_stmt_(StmtIfThenElseMergeRef x) {
  return x.as<Stmt>();
}
StmtRef Mutator::mutate_stmt_(StmtLoopMergeRef x) {
  return x.as<Stmt>();
}
StmtRef Mutator::mutate_stmt_(StmtLoopContinueRef x) {
  return x.as<Stmt>();
}
StmtRef Mutator::mutate_stmt_(StmtLoopBackEdgeRef x) {
  return x.as<Stmt>();
}
StmtRef Mutator::mutate_stmt_(StmtRangedLoopRef x) {
  x->body_block = mutate_stmt(x->body_block);
  x->itervar = mutate_mem(x->itervar);
  return x.as<Stmt>();
}
StmtRef Mutator::mutate_stmt_(StmtStoreRef x) {
  x->dst_ptr = mutate_mem(x->dst_ptr);
  x->value = mutate_expr(x->value);
  return x.as<Stmt>();
}
