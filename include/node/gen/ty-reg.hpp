// GENERATED BY `scripts/gen-visitor-templates.py`; DO NOT MODIFY.
// Type node registry.
// @PENGUINLIONG
#pragma once
#include "node/node.hpp"

enum TypeClass {
  L_TYPE_CLASS_PATTERN_CAPTURE,
  L_TYPE_CLASS_VOID,
  L_TYPE_CLASS_BOOL,
  L_TYPE_CLASS_INT,
  L_TYPE_CLASS_FLOAT,
  L_TYPE_CLASS_STRUCT,
  L_TYPE_CLASS_POINTER,
};

struct Type : public Node {
  const TypeClass cls;

  template<typename T>
  const T& as() const {
    liong::assert(is<T>(), "type class mismatched");
    return *(const T*)this;
  }
  template<typename T>
  bool is() const {
    return cls == T::CLS;
  }
  virtual bool structured_eq(TypeRef b_) const { liong::unimplemented(); }

protected:
  inline Type(
    TypeClass cls
  ) : Node(L_NODE_VARIANT_TYPE), cls(cls)
  {
  }
};
