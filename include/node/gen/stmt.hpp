// GENERATED BY `scripts/gen-visitor-templates.py`; DO NOT MODIFY.
// Statement node implementation.
// @PENGUINLIONG
#pragma once
#include "node/reg.hpp"

struct StmtNop : public Stmt {
  static const StmtOp OP = L_STMT_OP_NOP;

  inline StmtNop(
  ) : Stmt(L_STMT_OP_NOP) {
  }
};

struct StmtBlock : public Stmt {
  static const StmtOp OP = L_STMT_OP_BLOCK;
  std::vector<std::shared_ptr<Stmt>> stmts;

  inline StmtBlock(
    const std::vector<std::shared_ptr<Stmt>>& stmts
  ) : Stmt(L_STMT_OP_BLOCK), stmts(stmts) {
    for (const auto& x : stmts) { liong::assert(x != nullptr); }
  }
};

struct StmtConditionalBranch : public Stmt {
  static const StmtOp OP = L_STMT_OP_CONDITIONAL_BRANCH;
  std::shared_ptr<Expr> cond;
  std::shared_ptr<Stmt> then_block;
  std::shared_ptr<Stmt> else_block;

  inline StmtConditionalBranch(
    const std::shared_ptr<Expr>& cond,
    const std::shared_ptr<Stmt>& then_block,
    const std::shared_ptr<Stmt>& else_block
  ) : Stmt(L_STMT_OP_CONDITIONAL_BRANCH), cond(cond), then_block(then_block), else_block(else_block) {
    liong::assert(cond != nullptr);
    liong::assert(then_block != nullptr);
    liong::assert(else_block != nullptr);
  }
};

struct StmtIfThenElse : public Stmt {
  static const StmtOp OP = L_STMT_OP_IF_THEN_ELSE;
  std::shared_ptr<Stmt> body_block;

  inline StmtIfThenElse(
    const std::shared_ptr<Stmt>& body_block
  ) : Stmt(L_STMT_OP_IF_THEN_ELSE), body_block(body_block) {
    liong::assert(body_block != nullptr);
  }
};

struct StmtLoop : public Stmt {
  static const StmtOp OP = L_STMT_OP_LOOP;
  std::shared_ptr<Stmt> body_block;
  std::shared_ptr<Stmt> continue_block;

  inline StmtLoop(
    const std::shared_ptr<Stmt>& body_block,
    const std::shared_ptr<Stmt>& continue_block
  ) : Stmt(L_STMT_OP_LOOP), body_block(body_block), continue_block(continue_block) {
    liong::assert(body_block != nullptr);
    liong::assert(continue_block != nullptr);
  }
};

struct StmtReturn : public Stmt {
  static const StmtOp OP = L_STMT_OP_RETURN;

  inline StmtReturn(
  ) : Stmt(L_STMT_OP_RETURN) {
  }
};

struct StmtIfThenElseMerge : public Stmt {
  static const StmtOp OP = L_STMT_OP_IF_THEN_ELSE_MERGE;

  inline StmtIfThenElseMerge(
  ) : Stmt(L_STMT_OP_IF_THEN_ELSE_MERGE) {
  }
};

struct StmtLoopMerge : public Stmt {
  static const StmtOp OP = L_STMT_OP_LOOP_MERGE;

  inline StmtLoopMerge(
  ) : Stmt(L_STMT_OP_LOOP_MERGE) {
  }
};

struct StmtLoopContinue : public Stmt {
  static const StmtOp OP = L_STMT_OP_LOOP_CONTINUE;

  inline StmtLoopContinue(
  ) : Stmt(L_STMT_OP_LOOP_CONTINUE) {
  }
};

struct StmtLoopBackEdge : public Stmt {
  static const StmtOp OP = L_STMT_OP_LOOP_BACK_EDGE;

  inline StmtLoopBackEdge(
  ) : Stmt(L_STMT_OP_LOOP_BACK_EDGE) {
  }
};

struct StmtRangedLoop : public Stmt {
  static const StmtOp OP = L_STMT_OP_RANGED_LOOP;
  std::shared_ptr<Stmt> body_block;
  std::shared_ptr<Memory> itervar;
  std::shared_ptr<Expr> begin;
  std::shared_ptr<Expr> end;
  std::shared_ptr<Expr> stride;

  inline StmtRangedLoop(
    const std::shared_ptr<Stmt>& body_block,
    const std::shared_ptr<Memory>& itervar,
    const std::shared_ptr<Expr>& begin,
    const std::shared_ptr<Expr>& end,
    const std::shared_ptr<Expr>& stride
  ) : Stmt(L_STMT_OP_RANGED_LOOP), body_block(body_block), itervar(itervar), begin(begin), end(end), stride(stride) {
    liong::assert(body_block != nullptr);
    liong::assert(itervar != nullptr);
    liong::assert(begin != nullptr);
    liong::assert(end != nullptr);
    liong::assert(stride != nullptr);
  }
};

struct StmtStore : public Stmt {
  static const StmtOp OP = L_STMT_OP_STORE;
  std::shared_ptr<Memory> dst_ptr;
  std::shared_ptr<Expr> value;

  inline StmtStore(
    const std::shared_ptr<Memory>& dst_ptr,
    const std::shared_ptr<Expr>& value
  ) : Stmt(L_STMT_OP_STORE), dst_ptr(dst_ptr), value(value) {
    liong::assert(dst_ptr != nullptr);
    liong::assert(value != nullptr);
  }
};
