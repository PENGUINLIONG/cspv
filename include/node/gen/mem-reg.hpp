// GENERATED BY `scripts/gen-visitor-templates.py`; DO NOT MODIFY.
// Memory node registry.
// @PENGUINLIONG
#pragma once
#include "node/node.hpp"

enum MemoryClass {
  L_MEMORY_CLASS_FUNCTION_VARIABLE,
  L_MEMORY_CLASS_UNIFORM_BUFFER,
  L_MEMORY_CLASS_STORAGE_BUFFER,
  L_MEMORY_CLASS_SAMPLED_IMAGE,
  L_MEMORY_CLASS_STORAGE_IMAGE,
};

struct Memory : public Node {
  const MemoryClass cls;
  std::shared_ptr<Type> ty;
  std::vector<std::shared_ptr<Expr>> ac;

  template<typename T>
  const T& as() const {
    liong::assert(is<T>(), "memory class mismatched");
    return *(const T*)this;
  }
  template<typename T>
  bool is() const {
    return cls == T::CLS;
  }

protected:
  inline Memory(
    MemoryClass cls,
    const std::shared_ptr<Type>& ty,
    const std::vector<std::shared_ptr<Expr>>& ac
  ) : Node(L_NODE_VARIANT_MEMORY),
    cls(cls),
    ty(ty),
    ac(ac) {}
};
