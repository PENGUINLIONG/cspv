// GENERATED BY `scripts/gen-visitor-templates.py`; DO NOT MODIFY.
// Memory node implementation.
// @PENGUINLIONG
#pragma once
#include "node/reg.hpp"

struct MemoryFunctionVariable : public Memory {
  static const MemoryClass CLS = L_MEMORY_CLASS_FUNCTION_VARIABLE;
  void* handle;

  inline MemoryFunctionVariable(
    const std::shared_ptr<Type>& ty,
    const std::vector<std::shared_ptr<Expr>>& ac,
    void* handle
  ) : Memory(L_MEMORY_CLASS_FUNCTION_VARIABLE, ty, ac), handle(handle) {
  }
};

struct MemoryUniformBuffer : public Memory {
  static const MemoryClass CLS = L_MEMORY_CLASS_UNIFORM_BUFFER;
  uint32_t binding;
  uint32_t set;

  inline MemoryUniformBuffer(
    const std::shared_ptr<Type>& ty,
    const std::vector<std::shared_ptr<Expr>>& ac,
    uint32_t binding,
    uint32_t set
  ) : Memory(L_MEMORY_CLASS_UNIFORM_BUFFER, ty, ac), binding(binding), set(set) {
  }
};

struct MemoryStorageBuffer : public Memory {
  static const MemoryClass CLS = L_MEMORY_CLASS_STORAGE_BUFFER;
  uint32_t binding;
  uint32_t set;

  inline MemoryStorageBuffer(
    const std::shared_ptr<Type>& ty,
    const std::vector<std::shared_ptr<Expr>>& ac,
    uint32_t binding,
    uint32_t set
  ) : Memory(L_MEMORY_CLASS_STORAGE_BUFFER, ty, ac), binding(binding), set(set) {
  }
};

struct MemorySampledImage : public Memory {
  static const MemoryClass CLS = L_MEMORY_CLASS_SAMPLED_IMAGE;
  uint32_t binding;
  uint32_t set;

  inline MemorySampledImage(
    const std::shared_ptr<Type>& ty,
    const std::vector<std::shared_ptr<Expr>>& ac,
    uint32_t binding,
    uint32_t set
  ) : Memory(L_MEMORY_CLASS_SAMPLED_IMAGE, ty, ac), binding(binding), set(set) {
  }
};

struct MemoryStorageImage : public Memory {
  static const MemoryClass CLS = L_MEMORY_CLASS_STORAGE_IMAGE;
  uint32_t binding;
  uint32_t set;

  inline MemoryStorageImage(
    const std::shared_ptr<Type>& ty,
    const std::vector<std::shared_ptr<Expr>>& ac,
    uint32_t binding,
    uint32_t set
  ) : Memory(L_MEMORY_CLASS_STORAGE_IMAGE, ty, ac), binding(binding), set(set) {
  }
};
