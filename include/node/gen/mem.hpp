// GENERATED BY `scripts/gen-visitor-templates.py`; DO NOT MODIFY.
// Memory node implementation.
// @PENGUINLIONG
#pragma once
#include "node/reg.hpp"

struct MemoryFunctionVariable : public Memory {
  static const MemoryClass CLS = L_MEMORY_CLASS_FUNCTION_VARIABLE;
  void* handle;

  inline MemoryFunctionVariable(
    const NodeRef<Type>& ty,
    const std::vector<NodeRef<Expr>>& ac,
    void* handle
  ) : Memory(L_MEMORY_CLASS_FUNCTION_VARIABLE, ty, ac), handle(handle) {
  }
};

struct MemoryIterationVariable : public Memory {
  static const MemoryClass CLS = L_MEMORY_CLASS_ITERATION_VARIABLE;
  NodeRef<Expr> begin;
  NodeRef<Expr> end;
  NodeRef<Expr> stride;

  inline MemoryIterationVariable(
    const NodeRef<Type>& ty,
    const std::vector<NodeRef<Expr>>& ac,
    const NodeRef<Expr>& begin,
    const NodeRef<Expr>& end,
    const NodeRef<Expr>& stride
  ) : Memory(L_MEMORY_CLASS_ITERATION_VARIABLE, ty, ac), begin(begin), end(end), stride(stride) {
    liong::assert(begin != nullptr);
    liong::assert(end != nullptr);
    liong::assert(stride != nullptr);
  }
};

struct MemoryUniformBuffer : public Memory {
  static const MemoryClass CLS = L_MEMORY_CLASS_UNIFORM_BUFFER;
  uint32_t binding;
  uint32_t set;

  inline MemoryUniformBuffer(
    const NodeRef<Type>& ty,
    const std::vector<NodeRef<Expr>>& ac,
    uint32_t binding,
    uint32_t set
  ) : Memory(L_MEMORY_CLASS_UNIFORM_BUFFER, ty, ac), binding(binding), set(set) {
  }
};

struct MemoryStorageBuffer : public Memory {
  static const MemoryClass CLS = L_MEMORY_CLASS_STORAGE_BUFFER;
  uint32_t binding;
  uint32_t set;

  inline MemoryStorageBuffer(
    const NodeRef<Type>& ty,
    const std::vector<NodeRef<Expr>>& ac,
    uint32_t binding,
    uint32_t set
  ) : Memory(L_MEMORY_CLASS_STORAGE_BUFFER, ty, ac), binding(binding), set(set) {
  }
};

struct MemorySampledImage : public Memory {
  static const MemoryClass CLS = L_MEMORY_CLASS_SAMPLED_IMAGE;
  uint32_t binding;
  uint32_t set;

  inline MemorySampledImage(
    const NodeRef<Type>& ty,
    const std::vector<NodeRef<Expr>>& ac,
    uint32_t binding,
    uint32_t set
  ) : Memory(L_MEMORY_CLASS_SAMPLED_IMAGE, ty, ac), binding(binding), set(set) {
  }
};

struct MemoryStorageImage : public Memory {
  static const MemoryClass CLS = L_MEMORY_CLASS_STORAGE_IMAGE;
  uint32_t binding;
  uint32_t set;

  inline MemoryStorageImage(
    const NodeRef<Type>& ty,
    const std::vector<NodeRef<Expr>>& ac,
    uint32_t binding,
    uint32_t set
  ) : Memory(L_MEMORY_CLASS_STORAGE_IMAGE, ty, ac), binding(binding), set(set) {
  }
};

typedef NodeRef<Memory> MemoryRef;
typedef NodeRef<MemoryFunctionVariable> MemoryFunctionVariableRef;
typedef NodeRef<MemoryIterationVariable> MemoryIterationVariableRef;
typedef NodeRef<MemoryUniformBuffer> MemoryUniformBufferRef;
typedef NodeRef<MemoryStorageBuffer> MemoryStorageBufferRef;
typedef NodeRef<MemorySampledImage> MemorySampledImageRef;
typedef NodeRef<MemoryStorageImage> MemoryStorageImageRef;
